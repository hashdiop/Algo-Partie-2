FUNCTION Search_And_Addition(tab1:ARRAY_OF INTEGER,tab2:ARRAY_OF INTEGER) : INTEGER
VAR
    i,j,k: INTEGER;
    liste_addition:ARRAY_OF INTEGER
    resultat
BEGIN
   FOR i FROM 0 TO tab1.length-1 STEP 1  DO
        j := 0 ;
        WHILE (j < tab2.length) DO
            IF (tab2[j] != tab1[i]) THEN
                FOR k FROM 0 TO liste_addition.length-1 STEP 1  DO
                    IF (tab2[j] !=liste_addition[k]) THEN
                        liste_addition.append(tab2[j]);
                    END_IF
                END_FOR
            END_IF
            j := j+1 ; // mise à jour de l'index
        END_WHILE
        FOR k FROM 0 TO liste_addition.length-1 STEP 1  DO
            resultat+=liste_addition[k];
        END_FOR
        IF (j = tab.length) THEN // nous avons atteint la fin du tableau sans trouver l'élément
            pos := -1 ; // -1 signifie que nous n'avons pas trouvé l'élément.
        END_IF
   END_FOR
END


PROCEDURE Produit_en_point(ps)
VAR
    v1 , v2 : ARRAY_OF FLOAT[2];
    ps : FLOAT :=0;
    i :INTEGER;
BEGIN
    FOR i FROM 0 TO v1.length-1 STEP 1  DO
        ps+=v1[i]*v2[i];
    END_FOR
END


ALGORITHM PS_nvect
VAR
    n,i,j :INTEGER;
    vecteur: ARRAY_OF FLOAT[2];
    vecteurs: ARRAY_OF vecteur;
BEGIN
// Parcourir l'ensemble des vecteurs
    FOR i FROM 0 TO n-1 STEP 1  DO
        FOR j FROM 0 TO n-1 STEP step  DO
            IF (i=j) THEN
                BREAK;
            ELSE
                // Tester l'orthogonalite
                IF (Produit_en_point(vecteur[i],vecteur[j])=0) THEN
                    Write("Les vecteurs",vecteurs[i],"et",vecteurs[j],"sont orthogonales");
                ELSE
                    Write("Les vecteurs",vecteurs[i],"et",vecteurs[j],"ne sont pas orthogonales")
                END_IF
            END_IF
        END_FOR
    END_FOR
END